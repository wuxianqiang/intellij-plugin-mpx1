options.indent.radio.block-specific.caption=Specific to the language in the block
options.indent.radio.block-specific.tooltip=The indents in the <template>, <script> and <style> blocks will be set according to the code style settings for the used language. For example, <style lang='scss'> will use indents set in SCSS
options.indent.radio.uniform.caption=Same in the whole file
options.indent.label.top-level.caption=Indent children of top-level tag:

mpx.create.single.file.component.action.text=Mpx Component
mpx.create.single.file.component.action.description=Creates Mpx component file
mpx.create.single.file.component.action.dialog.title=New {0}
mpx.create.single.file.component.action.name=Create {0} {1}

mpx.documentation.mpx=Mpx
mpx.documentation.section.library=Library:
# mpx.documentation.section.* properties are used indirectly
# suppress inspection "UnusedProperty"
mpx.documentation.section.argument=Argument:
# suppress inspection "UnusedProperty"
mpx.documentation.section.required=Required
# suppress inspection "UnusedProperty"
mpx.documentation.section.pattern=Pattern:
# suppress inspection "UnusedProperty"
mpx.documentation.section.default=Default:

# mpx.documentation.type.* properties are used indirectly
# suppress inspection "UnusedProperty"
mpx.documentation.type.functional.component=functional component
# suppress inspection "UnusedProperty"
mpx.documentation.type.component=component
# suppress inspection "UnusedProperty"
mpx.documentation.type.directive=directive
# suppress inspection "UnusedProperty"
mpx.documentation.type.filter=filter
# suppress inspection "UnusedProperty"
mpx.documentation.type.component.method=component method
# suppress inspection "UnusedProperty"
mpx.documentation.type.component.event=component event
# suppress inspection "UnusedProperty"
mpx.documentation.type.slot=slot
# suppress inspection "UnusedProperty"
mpx.documentation.type.component.property=component property
# suppress inspection "UnusedProperty"
mpx.documentation.type.component.computed.property=component computed property
# suppress inspection "UnusedProperty"
mpx.documentation.type.component.data.property=component data property
# suppress inspection "UnusedProperty"
mpx.documentation.type.directive.modifier=directive modifier
# suppress inspection "UnusedProperty"
mpx.documentation.type.directive.argument=directive argument

mpx.file.type.description=Mpx.js template

mpx.formatting.spacing.within.interpolations=Interpolations
mpx.formatting.spacing.within.group=Within
mpx.formatting.wrapping.interpolations=Interpolations
mpx.formatting.wrapping.new-line-after-start-delimiter=New line after '{{'
mpx.formatting.wrapping.new-line-before-end-delimiter=New line before '}}'

mpx.inspection.group.name=Mpx
mpx.inspection.display.name.data.function=Data function
mpx.inspection.display.name.duplicate.tag=Duplicate template/script tag
mpx.inspection.message.attribute.does.not.accept.value={0} does not accept any value
mpx.inspection.message.data.property.should.be.function=Data property should be a function
mpx.inspection.message.duplicate.tag=Duplicated top-level tag {0}
mpx.inspection.message.filter.function.with.no.args=Filter function should accept at least one argument
mpx.inspection.message.filter.invalid.number.of.arguments=Invalid number of filter arguments, expected {0}
mpx.inspection.message.unresolved.filter=Unresolved filter {0}

mpx.live.template.context.component=Mpx component
mpx.live.template.context.script.tag=Mpx script tag content
mpx.live.template.context.template=Mpx template
mpx.live.template.context.template.tag.element=Mpx template tag element
mpx.live.template.context.top.level=Mpx top-level element

mpx.param.hints.show.names.for.filters=For filter arguments

mpx.parser.message.expected.comma.or.end.of.expression=Expected comma or end of expression
mpx.parser.message.expected.end.of.expression=Expected end of expression
mpx.parser.message.expected.identifier.or.string=Expected identifier or string
mpx.parser.message.expected.in.or.of='in' or 'of' expected
mpx.parser.message.expected.lparen.pipe.or.end.of.expression=Expected (, | or end of expression
mpx.parser.message.expected.pipe.or.end.of.expression=Expected | or end of expression
mpx.parser.message.statements.not.allowed=Statements are not allowed in Mpx expressions
mpx.parser.message.unterminated.interpolation=Unterminated interpolation

mpx.project.generator.name=Mpx.js
mpx.project.generator.description=Create a new <a href='https://mpxjs.org'>Mpx.js</a> project using <a href='https://cli.mpxjs.org'>Mpx CLI</a>.
mpx.project.generator.presentable.package.name=Mpx &CLI
mpx.project.generator.use.default.project.setup=Use the &default project setup (babel, eslint)

mpx.quickfix.wrap.with.function.text=Wrap data object in function
mpx.quickfix.wrap.with.function.family=Wrap object

mpx.search.scope.template.name=template

mpx.template.intention.extract.component=Extract Mpx component
mpx.template.intention.extract.component.family.name=Extract Mpx component
mpx.template.intention.extract.component.description=Extracts selected part of a Mpx.js template to a new single-file component, passes the used data and methods to it with props
mpx.template.intention.extract.component.error.component.name=Invalid component name: {0}
mpx.template.intention.extract.component.error.component.exists=Component {0} already exists
mpx.template.intention.extract.component.error.file.exists=File {0} already exists
mpx.template.intention.extract.component.continue=Continue editing

mpx.template.intention.v-model.expand.family.name=Expand v-model
mpx.template.intention.v-model.expand.command.name=Expand v-model

nuxt.support.notification.title=Nuxt.js support
nuxt.support.notification.contents=For better code completion suggestions, add @nuxt/types to project dependencies

mpxx.inspection.message.unresolved.action=Cannot resolve Mpxx action {0}
mpxx.inspection.message.unresolved.getter=Cannot resolve Mpxx getter {0}
mpxx.inspection.message.unresolved.mutation=Cannot resolve Mpxx mutation {0}
mpxx.inspection.message.unresolved.namespace=Unknown Mpxx module namespace {0}
mpxx.inspection.message.unresolved.state=Cannot resolve Mpxx state {0}
mpxx.inspection.message.unresolved.symbol=Cannot resolve Mpxx symbol {0}

